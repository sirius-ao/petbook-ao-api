import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { connectToWhatsApp } from './config/whatsapp/baileys.connection'; // ðŸ‘ˆ import

// documentaÃ§Ã£o base do swagger api
function apiDoc(app) {
  const urlApiDoc = 'api';
  const titleApi = 'PetBook API - OpenAPI 3.0';
  const descriptionApi =
    'Esta descriÃ§Ã£o refere-se ha um sistema hÃ­brido: gestÃ£o de clÃ­nica/petshop, app para donos, e-commerce  e afiliados' +
    '\n .Teremos Ã¡reas separadas: usuÃ¡rios internos (admin, vet, atendente), clientes (donos de pet)' +
    'e sistema (vendas, agendamentos etc.).' +
    'Os endpoints REST que representam esse escopo sÃ£o:';

  const config = new DocumentBuilder()
    .setTitle(titleApi)
    .setDescription(descriptionApi)
    .setVersion('1.0.0')
    .addBearerAuth(
      { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
      'access-token',
    )
    .addGlobalResponse({ status: 500, description: ' Internal Server Error' })
    .addTag('user', 'GestÃ£o de usuÃ¡rios internos do sistema')
    .addTag('business', 'Cadastro e gestÃ£o de clÃ­nicas/petshops')
    .addTag('client', 'Donos de pets')
    .addTag('pet', 'GestÃ£o dos animais de estimaÃ§Ã£o')
    .addTag('appointment', 'Agendamentos de serviÃ§os')
    .addTag('medical-record', 'ProntuÃ¡rio clÃ­nico dos pets')
    .addTag('product', 'GestÃ£o dos produtos')
    .addTag('sale', 'Vendas e faturaÃ§Ãµes')
    .addTag('affiliate', 'GestÃ£o de afiliados')
    .addTag('affiliate-referral', 'IndicaÃ§Ãµes e conversÃµes')
    .addTag('service', 'ServiÃ§os oferecidos pela empresa')
    .addTag('sale-item', 'Item de Venda: cada produto vendido em uma venda.')
    .addTag('auth', 'Gestao de autenticacoes de usuarios')
    .build();

  const documentFactory = () => SwaggerModule.createDocument(app, config);
  SwaggerModule.setup(urlApiDoc, app, documentFactory);
}

// habilitando cors para o front
function GestaoCors(app) {
  app.enableCors({
    origin: [process.env.CORS_URL],
  });
}

function UsePipe(app){
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true, // Automatically remove non-whitelisted properties
    forbidNonWhitelisted: true, // Throw an error if non-whitelisted properties are present
    transform: true,            // Enable automatic transformation of input data
    transformOptions: {
      enableImplicitConversion: true, // // Allow implicit type conversion
    }
  }));
}

async function main() {
  await connectToWhatsApp(); // ðŸ‘ˆ conecta ao WhatsApp antes do Nest

  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe());
 // UsePipe(app);
  GestaoCors(app);
  apiDoc(app);
  await app.listen(process.env.PORT ?? 3000);
  console.log('âœ… API e WhatsApp iniciados com sucesso!');
}

main();
