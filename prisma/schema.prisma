generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(ATTENDANT)
  businessId    Int?
  Affiliate     Affiliate[]
  MedicalRecord MedicalRecord[]
  business      Business?       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createAt      DateTime        @default(now())
  updateAt      DateTime         @updatedAt
  @@index([businessId], map: "User_businessId_fkey")
}

model Business {
  id           Int        @id  @default(autoincrement())
  name         String
  address      String
  phone        String
  email        String
  appointments Appointment[]
  clients      Client[]
  products     Product[]
  sales        Sale[]
  services     Service[]
  users        User[]
  createAt     DateTime      @default(now())
  updateAt     DateTime       @updatedAt
}

model Client {
  id         Int   @id @default(autoincrement())
  name       String
  email      String?
  phone      String?
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  pets       Pet[]
  Sale       Sale[]
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  @@index([businessId], map: "Client_businessId_fkey")
}

model Pet {
  id           Int          @id @default(autoincrement())
  name         String
  species      String
  breed        String
  birthDate    DateTime?
  clienteId    Int
   lastFedAt    DateTime?    // Novo campo
  appointments Appointment[]
  records      MedicalRecord[]
  client       Client          @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([clienteId], map: "Pet_clienteId_fkey")
}

model Appointment {
  id         Int            @id @default(autoincrement())
  date       DateTime
  status     AppointmentStatus @default(SCHEDULED)
  petId      Int
  serviceId  Int?
  businessId Int
  notes      String?
  business   Business          @relation(fields: [businessId], references: [id])
  pet        Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  service    Service?          @relation(fields: [serviceId], references: [id])
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([businessId], map: "Appointment_businessId_fkey")
  @@index([petId], map: "Appointment_petId_fkey")
  @@index([serviceId], map: "Appointment_serviceId_fkey")
}

model Service {
  id          Int        @id @default(autoincrement())
  name        String
  price       Float
  duration    Int
  businessId  Int
  Appointment Appointment[]
  business    Business      @relation(fields: [businessId], references: [id])
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([businessId], map: "Service_businessId_fkey")
}

model Product {
  id         Int     @id @default(autoincrement())
  name       String
  price      Float
  stock      Int
  businessId Int
  business   Business   @relation(fields: [businessId], references: [id])
  SaleItem   SaleItem[]
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([businessId], map: "Product_businessId_fkey")
}

model Sale {
  id         Int     @id @default(autoincrement())
  clientId   Int?
  businessId Int
  total      Float
  dateSale   DateTime   @default(now())
  business   Business   @relation(fields: [businessId], references: [id])
  client     Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items      SaleItem[]
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([businessId], map: "Sale_businessId_fkey")
  @@index([clientId], map: "Sale_clientId_fkey")
}

model SaleItem {
  id        Int  @id @default(autoincrement())
  saleId    Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([productId], map: "SaleItem_productId_fkey")
  @@index([saleId], map: "SaleItem_saleId_fkey")
}

model MedicalRecord {
  id          Int   @id @default(autoincrement())
  petId       Int
  vetId       Int?
  date        DateTime @default(now())
  description String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  vet         User?    @relation(fields: [vetId], references: [id], onDelete: SetNull)
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([petId], map: "MedicalRecord_petId_fkey")
  @@index([vetId], map: "MedicalRecord_vetId_fkey")
}

model Affiliate {
  id                Int              @id @default(autoincrement())
  userId            Int
  code              String              @unique
  earnings          Float               @default(0)
  user              User                @relation(fields: [userId], references: [id])
  AffiliateReferral AffiliateReferral[]
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([userId], map: "Affiliate_userId_fkey")
}

model AffiliateReferral {
  id             Int         @id @default(autoincrement())
  affiliateId    Int
  referredUserId Int?
  type           ReferralType
  value          Float
  status         ReferralStatus
  affiliate      Affiliate      @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  createAt     DateTime        @default(now())
  updateAt     DateTime         @updatedAt
  @@index([affiliateId], map: "AffiliateReferral_affiliateId_fkey")
}

// sequencia de enum do MER

enum Role {
  ADMIN
  VET
  ATTENDANT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum ReferralType {
  USER_SIGNUP
  BUSINESS_SIGNUP
  ORDER
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
}
