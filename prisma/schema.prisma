generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  password          String
  role              Role                @default(ATTENDANT)
  businessId        Int?
  Affiliate         Affiliate[]
  MedicalRecord     MedicalRecord[]
  business          Business?           @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createAt          DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  AffiliateReferral AffiliateReferral[]

  @@index([businessId])
}

model Business {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  phone        String
  email        String
  appointments Appointment[]
  clients      Client[]
  products     Product[]
  sales        Sale[]
  services     Service[]
  users        User[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
}

model Client {
  id           Int            @id @default(autoincrement())
  name         String
  email        String?
  phone        String?
  businessId   Int
  business     Business       @relation(fields: [businessId], references: [id])
  pets         Pet[]
  Sale         Sale[]
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  Lembrete     Lembrete[]
  Notification Notification[]

  @@index([businessId])
}

model Lembrete {
  id             Int            @id @default(autoincrement())
  title          String?
  message        String?
  dateTime       DateTime?
  repeat         String?
  channels       String[] // ["email","whatsapp","inapp"]
  isPrescription Boolean        @default(false)
  prescription   Json?
  pet            Pet?           @relation(fields: [petId], references: [id])
  petId          Int?
  cliente        Client?        @relation(fields: [clienteId], references: [id])
  clienteId      Int?
  createdAt      DateTime       @default(now())
  Notification   Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())

  // relação com Cliente (pode ser null se lembrete não tiver cliente)
  clientId Int?
  cliente  Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // relação com Lembrete
  lembreteId Int
  lembrete   Lembrete @relation(fields: [lembreteId], references: [id], onDelete: Cascade)
}

model Pet {
  id              Int             @id @default(autoincrement())
  name            String
  species         String
  breed           String
  birthDate       DateTime?
  clientId        Int
  nextVaccineDate DateTime?
  lastFedAt       DateTime?
  appointments    Appointment[]
  records         MedicalRecord[]
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createAt        DateTime        @default(now())
  updateAt        DateTime        @updatedAt
  Lembrete        Lembrete[]

  @@index([clientId])
}

model Appointment {
  id         Int               @id @default(autoincrement())
  date       DateTime
  status     AppointmentStatus @default(SCHEDULED)
  petId      Int
  serviceId  Int?
  businessId Int
  notes      String?
  remindAt   DateTime? // <- quando lembrar
  business   Business          @relation(fields: [businessId], references: [id])
  pet        Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  service    Service?          @relation(fields: [serviceId], references: [id])
  createAt   DateTime          @default(now())
  updateAt   DateTime          @updatedAt

  @@index([businessId])
  @@index([petId])
  @@index([serviceId])
}

model Service {
  id          Int           @id @default(autoincrement())
  name        String
  price       Float
  duration    Int
  businessId  Int
  Appointment Appointment[]
  business    Business      @relation(fields: [businessId], references: [id])
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt

  @@index([businessId])
}

model Product {
  id         Int        @id @default(autoincrement())
  name       String
  price      Float
  stock      Int
  businessId Int
  business   Business   @relation(fields: [businessId], references: [id])
  SaleItem   SaleItem[]
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  @@index([businessId])
}

model Sale {
  id         Int        @id @default(autoincrement())
  clientId   Int?
  businessId Int
  total      Float
  dateSale   DateTime   @default(now())
  business   Business   @relation(fields: [businessId], references: [id])
  client     Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items      SaleItem[]
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  @@index([businessId])
  @@index([clientId])
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  saleId    Int
  productId Int
  quantity  Int
  price     Float
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productId])
  @@index([saleId])
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  petId       Int
  vetId       Int?
  date        DateTime @default(now())
  description String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  vet         User?    @relation(fields: [vetId], references: [id], onDelete: SetNull)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  @@index([petId])
  @@index([vetId])
}

model Affiliate {
  id                Int                 @id @default(autoincrement())
  userId            Int
  code              String              @unique
  earnings          Float               @default(0)
  user              User                @relation(fields: [userId], references: [id])
  AffiliateReferral AffiliateReferral[]
  createAt          DateTime            @default(now())
  updateAt          DateTime            @updatedAt

  @@index([userId])
}

model AffiliateReferral {
  id             Int            @id @default(autoincrement())
  affiliateId    Int
  referredUserId Int?
  type           ReferralType
  value          Float
  status         ReferralStatus
  affiliate      Affiliate      @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  referredUser   User?          @relation(fields: [referredUserId], references: [id], onDelete: SetNull)
  createAt       DateTime       @default(now())
  updateAt       DateTime       @updatedAt

  @@index([affiliateId])
  @@index([referredUserId])
}

// Enums

enum Role {
  ADMIN
  VET
  ATTENDANT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum ReferralType {
  USER_SIGNUP
  BUSINESS_SIGNUP
  ORDER
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
}
